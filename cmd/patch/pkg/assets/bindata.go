// Code generated by go-bindata. DO NOT EDIT.
// sources:
// patch_config/prometheus.yaml
// patch_rules/alameda-metric.rules.yaml

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPatchconfigPrometheusyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcd\x6e\xc2\x30\x10\x84\xef\x79\x8a\x3d\xf4\x00\x94\x80\x7a\x75" +
	"\x0e\x3c\x08\xa2\xd6\x62\x0f\xc8\x6d\x62\x5b\x6b\x83\xfa\xf8\x55\xcc\x5f\xab\xd2\x9f\x34\x47\xaf\xbd\xe3\x6f\x67" +
	"\x47\x0e\x2d\xf4\xce\xb5\x48\xaa\xaa\x69\x99\xbb\xb8\xe4\x96\x3b\x58\xae\x3b\x64\x71\x66\xd1\xbf\xa8\x92\x11\x8e" +
	"\xd0\x26\xf8\x9d\xdb\x97\xa7\x2f\x61\xab\x3d\x77\x50\xf4\x7a\xd8\x42\x3c\x32\x52\xed\x83\x45\xaa\x0d\xdb\xa3\x4b" +
	"\x41\x2a\xa2\x93\x86\x16\xb4\xbc\x45\x7b\xeb\x27\xaa\x29\x85\x83\x18\xe8\x72\x93\x14\xad\x4d\xf0\x99\x9d\x87\x6c" +
	"\x2a\x22\xa2\x84\xc8\xc2\x39\x88\xa2\xa6\x14\x04\x7b\xbc\x29\x9a\x2c\x1e\xa7\xe5\x9c\x59\xf6\xc8\xa7\x7e\x45\xd7" +
	"\xee\x42\x75\x6e\x88\x2d\x1b\x74\xf0\x59\xd1\xc3\x53\xa9\xb1\xc9\x2e\x78\x75\xb9\xbb\x0b\x12\x83\xfd\x17\x42\x0c" +
	"\x76\xd8\xe7\xdf\xb8\x98\x20\x47\x67\x50\xc3\xdb\x18\x9c\xcf\xa9\xea\xe5\xfe\xe0\xa0\xd6\x1d\x32\xeb\x9b\x94\xbe" +
	"\x20\xfd\x36\xcf\xec\xde\x3c\xe7\x20\x9c\x8e\xbd\xd4\x00\x57\x87\x2c\xbe\x07\x4c\x91\x0d\xe6\x1f\x5c\xd0\xd7\xea" +
	"\xcf\xec\xcd\x6a\xb2\x7e\x6e\x36\xb3\x69\xb3\x5a\xcc\xee\x0c\x71\x95\x19\x15\x89\x3e\xd8\x9f\xe9\x82\x1d\x0b\x16" +
	"\xec\xe8\x98\xce\xbf\xee\x68\x1c\xd4\x90\x25\xbf\x07\x00\x00\xff\xff\xf2\x9c\x59\x74\x3b\x04\x00\x00")

func bindataPatchconfigPrometheusyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPatchconfigPrometheusyaml,
		"patch_config/prometheus.yaml",
	)
}



func bindataPatchconfigPrometheusyaml() (*asset, error) {
	bytes, err := bindataPatchconfigPrometheusyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "patch_config/prometheus.yaml",
		size: 1083,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1581924094, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPatchrulesAlamedametricrulesyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x3d\x6f\xdb\x30\x10\xdd\xf3\x2b\xae\x42\x81\x48\xb1\xe5\x20\x01" +
	"\xba\x08\xc8\xd2\x02\xdd\xba\x75\x0b\x0a\x82\x16\xcf\x2e\x1b\x91\x54\xf9\x21\x38\xa8\xdd\xdf\x5e\x90\x4e\x2c\xca" +
	"\xb1\xa4\x38\x48\x8c\x0c\xcd\xa0\x58\x12\x8f\xba\x7b\xef\xdd\xe3\x2d\xb5\x72\xb5\x29\xce\x00\x72\x90\x54\x60\x01" +
	"\xb4\xa2\x02\x19\xcd\x05\x5a\xcd\x4b\x73\x06\x00\xa0\x5d\x85\x61\x91\x5f\x86\xab\x5a\x17\xb0\x0e\x77\xfe\xcf\x38" +
	"\x01\xf3\x7b\x48\xa5\x62\x98\x41\xba\x7b\x0e\xe0\x9f\x10\x81\x42\xe9\x7b\xf2\x0d\xc5\x77\x65\x69\x45\xe6\xf7\x16" +
	"\xcd\x9f\x5f\x6a\x7e\xf3\x37\xf1\x0b\x72\x5c\xd5\x4a\x5b\xd4\xeb\x3b\x37\x47\x2d\xd1\xa2\xc9\x0d\xea\x86\x97\x98" +
	"\xa3\x64\xb5\xe2\xd2\x9a\x64\x13\xed\x7b\x01\x4a\x42\xea\xd3\x35\x35\x2d\x71\x0a\xb5\x62\x19\x84\x52\x48\x85\x0b" +
	"\xbb\x4d\x25\x0a\x78\x48\x65\x17\x41\x6a\xc5\x0a\xff\x39\xff\x83\x70\xb9\x50\xc5\x6e\xf5\x63\x9c\xc6\x52\x69\x56" +
	"\x84\xc8\x22\xae\x24\x14\x40\xac\x2f\xa6\x30\x4e\x1c\x8d\x4a\xba\x07\xcb\x57\x8d\xf8\x62\x54\x60\xd2\x41\xf9\x0b" +
	"\x2d\x7f\x22\x7b\xad\xdd\x3e\xbb\xc5\x02\xb5\x79\xf1\x76\xd9\x3b\xe3\x8c\x36\x94\x57\x74\x5e\xe1\x00\x6f\x57\x90" +
	"\x6f\x19\x1a\x8b\x87\xcb\x51\x69\xec\xa7\x75\xfe\x24\xc0\x59\x5e\x71\x43\x2d\x57\x92\x5c\x17\xe7\x63\x5a\xea\xa0" +
	"\x37\x85\x52\x49\x4b\xb9\x44\xdd\x15\x98\xa6\x16\xd3\xdd\x3b\x52\xd6\x8e\x38\x43\x97\x48\x0c\x96\x4a\xb2\x87\x04" +
	"\x1f\xf8\xf4\x88\x56\x68\x63\x26\x7d\x82\x26\x2f\x29\x6b\xb8\x51\x3a\x99\x02\x17\x74\x89\x1f\x6e\x92\x24\xfa\xa4" +
	"\xbf\xdd\xdc\x7e\x12\x3f\xb2\x7e\x16\x62\xea\x02\x91\xa4\xcd\x2a\x98\xcd\x68\x92\x1e\x45\xe2\xeb\x19\x60\x8b\x36" +
	"\xcb\x9e\x4e\x0b\x40\x04\xb8\xfd\xf6\x87\xaa\x3f\x42\xcd\x53\xa1\x18\xde\x24\x9c\x55\x98\x6c\x6e\xaf\xe3\xc2\x8f" +
	"\xd6\xf6\xa8\xb2\xfb\x05\x1d\x80\x6a\x55\x53\xd0\x66\x79\xd5\xa7\xe5\x3e\x1d\xef\xa0\xf5\xa6\xff\x0c\xa9\xb7\xa9" +
	"\x5f\x9e\xc5\x25\x8c\xda\xe2\x40\x47\xc6\x35\x68\xff\xaf\x53\x83\x71\x22\x15\x5c\xa6\x1d\x54\xb2\x96\xe6\x27\x9d" +
	"\xd5\xc5\x8f\x6c\xa1\x52\x4e\xda\xde\xa6\x0a\x6f\x63\xe1\xc4\x8e\x3d\x85\xb2\x76\x07\x0e\xb3\x57\xd0\xd1\xe6\x0d" +
	"\x65\xd3\xb6\x62\xbf\x80\xa4\x13\xbe\x8c\x01\x0b\x14\x74\x95\x56\x74\x8e\x15\xd1\x58\x57\xb4\xc4\x2e\x0d\x91\x71" +
	"\xe4\xc6\x52\x8b\x8f\xa3\xc2\x48\xdd\x53\x48\x6a\xc5\x92\x29\x24\x1f\xaf\x92\xf6\x26\x9d\x5d\x64\x49\x96\x45\xd0" +
	"\xef\x21\x72\xc8\x44\x07\x51\xe8\x63\xbc\xdf\x28\x78\xeb\x14\x8c\x9b\x3b\xc2\x15\xb1\x5c\x1c\x36\xcc\x63\x2c\x83" +
	"\xa1\x7f\xe2\x83\x1a\x81\xb3\xc9\x5a\xcf\xd9\x6c\xb2\x36\xfe\xd2\xf8\xcb\x2a\x5c\x99\xc8\x67\x93\xb7\xf7\x94\x67" +
	"\x9c\x96\xa1\xf8\x3d\x77\x21\x7c\xd8\x7f\xff\x4f\x3c\x07\x27\x9e\x13\xf0\x17\xdb\xf1\xa9\x87\xf0\x13\xca\x73\x70" +
	"\x6a\xea\x6f\xf6\x9a\xfb\xfc\x51\x13\x8d\xbf\x1d\x1a\xbb\x6d\xe2\xbd\xbd\x9f\xae\x0a\xc7\xc2\xc9\xe7\xb0\xc7\x31" +
	"\xec\x9d\x0c\x5b\xff\x02\x00\x00\xff\xff\x8e\x03\x50\xb3\x16\x0e\x00\x00")

func bindataPatchrulesAlamedametricrulesyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPatchrulesAlamedametricrulesyaml,
		"patch_rules/alameda-metric.rules.yaml",
	)
}



func bindataPatchrulesAlamedametricrulesyaml() (*asset, error) {
	bytes, err := bindataPatchrulesAlamedametricrulesyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "patch_rules/alameda-metric.rules.yaml",
		size: 3606,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1582018486, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"patch_config/prometheus.yaml":          bindataPatchconfigPrometheusyaml,
	"patch_rules/alameda-metric.rules.yaml": bindataPatchrulesAlamedametricrulesyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"patch_config": {Func: nil, Children: map[string]*bintree{
		"prometheus.yaml": {Func: bindataPatchconfigPrometheusyaml, Children: map[string]*bintree{}},
	}},
	"patch_rules": {Func: nil, Children: map[string]*bintree{
		"alameda-metric.rules.yaml": {Func: bindataPatchrulesAlamedametricrulesyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
